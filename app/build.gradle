apply plugin: 'com.android.application'

android {
    namespace 'com.ai.android.pagebar.app'

    defaultConfig {
        versionCode androidApplicationVersionCode
        versionName androidApplicationVersionName

        minSdk androidApplicationMinSdkVersion
        compileSdk androidApplicationCompileSdkVersion
        targetSdk androidApplicationTargetSdkVersion

        archivesBaseName = "$rootProject.name-$versionName"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility javaSourceCompatibility
        targetCompatibility javaTargetCompatibility
    }

    buildFeatures {
        buildConfig true
    }

    lint {
        abortOnError true
    }
}

dependencies {
    implementation project(path: ':pagebar')

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

tasks.register("cleanArtifacts", Delete) {
    delete fileTree(dir: "$artifactsDirectory", include: "**/$rootProject.name*.apk")
    delete fileTree(dir: "$artifactsDirectory", include: "**/$rootProject.name*.aab")
}

clean.finalizedBy(cleanArtifacts)

tasks.register("copyArtifacts") {
    doFirst {
        def buildDirectory = layout.buildDirectory.getAsFile().get()
        println "APK"
        println ""

        copyArtifactsImpl("$buildDirectory/outputs/")

        println ""
        println ""

        println "BUNDLE"
        println ""

        copyArtifactsImpl("$buildDirectory/intermediates/apk/")
    }
}

build.finalizedBy(copyArtifacts)

ext.copyArtifactsImpl = { sourceRoot ->
    println "SOURCE: $sourceRoot"
    println "TARGET: $artifactsDirectory"
    println ""

    copy {
        from(fileTree(sourceRoot).files)
        into(artifactsDirectory)
        include('*.apk', '*.aab')

        eachFile {
            println "FILE: $it.relativeSourcePath -> $it.relativePath"
        }
    }
}
